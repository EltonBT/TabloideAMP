# Generated by Django 5.2.4 on 2025-08-20 19:44

from django.db import migrations


def fix_duplicate_positions(apps, schema_editor):
    ItemTabloide = apps.get_model('relatorios', 'ItemTabloide')
    
    # Group items by template
    templates = {}
    for item in ItemTabloide.objects.all():
        if item.template_id not in templates:
            templates[item.template_id] = []
        templates[item.template_id].append(item)
    
    # Fix duplicates for each template
    for template_id, items in templates.items():
        # Sort by ordem, then by id for consistency
        items.sort(key=lambda x: (x.ordem, x.id))
        
        # Reassign positions starting from 1
        for i, item in enumerate(items, 1):
            item.ordem = i
            item.save()


def reverse_fix_duplicate_positions(apps, schema_editor):
    # Can't really reverse this operation
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('relatorios', '0003_templatetabloide_cor_fundo_alternada'),
    ]

    operations = [
        migrations.RunPython(fix_duplicate_positions, reverse_fix_duplicate_positions),
        migrations.AlterUniqueTogether(
            name='itemtabloide',
            unique_together={('template', 'produto'), ('template', 'ordem')},
        ),
    ]
